The mcmc module
===============
This module is designed to provide Markov-Chain Monte-Carlo (MCMC) samplers which can
be easily applied to inference problems.

.. _GibbsChain:

GibbsChain
~~~~~~~~~~
Gibbs samping is implemented as the GibbsChain class. This implementation is self-tuning, such that detailed knowledge of the PDF
being sampled is not required in order for the algorithm to work efficiently.

Demonstrations of how to use the GibbsChain class can be found in ``/demos/GibbsChain_demo.py`` and
``/demos/spectroscopy_demo.py``

.. autoclass:: inference.mcmc.GibbsChain
   :members: advance, run_for, mode, get_marginal, get_sample, get_parameter, get_interval, plot_diagnostics, matrix_plot, set_non_negative, set_boundaries

.. _HamiltonianChain:

HamiltonianChain
~~~~~~~~~~~~~~~~
Hamiltonian Monte-Carlo (HMC) is an algorithm where proposed steps are generated by integrating Hamilton's equations,
treating the negative posterior log-probability as a scalar potential. In order to do this, the algorithm
requires the gradient of the log-posterior. Assuming this gradient can be calculated efficiently, HMC deals well
with strongly correlated variables and scales favourably to higher-dimensionality problems.

This implementation automatically selects an appropriate time-step for the Hamiltonian dynamics simulation, but
does not currently automatically select an appropriate number of time-steps to take. We would like to add this
functionality in the future, for example by implementing the NUTS algorithm.

Demonstrations of how to use the HamiltonianChain class can be found in ``/demos/HamiltonianChain_demo.py``

.. autoclass:: inference.mcmc.HamiltonianChain
   :members: advance, run_for, mode, get_marginal, get_parameter, plot_diagnostics, matrix_plot